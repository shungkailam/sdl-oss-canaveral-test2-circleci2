{
  "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.", 
  "required": [
    "name"
  ], 
  "additionalProperties": false, 
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "properties": {
    "configMap": {
      "additionalProperties": false, 
      "type": "object", 
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "items": {
          "items": {
            "additionalProperties": false, 
            "required": [
              "key", 
              "path"
            ], 
            "type": "object", 
            "description": "Maps a string key to a path within a volume.", 
            "properties": {
              "path": {
                "type": "string", 
                "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
              }, 
              "mode": {
                "type": "integer", 
                "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                "format": "int32"
              }, 
              "key": {
                "type": "string", 
                "description": "The key to project."
              }
            }
          }, 
          "type": [
            "array", 
            "null"
          ], 
          "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
        }, 
        "optional": {
          "type": "boolean", 
          "description": "Specify whether the ConfigMap or its keys must be defined"
        }, 
        "defaultMode": {
          "type": "integer", 
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
          "format": "int32"
        }, 
        "name": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        }
      }
    }, 
    "csi": {
      "additionalProperties": false, 
      "required": [
        "driver"
      ], 
      "type": "object", 
      "description": "Represents a source location of a volume to mount, managed by an external CSI driver", 
      "properties": {
        "driver": {
          "type": "string", 
          "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster."
        }, 
        "readOnly": {
          "type": "boolean", 
          "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write)."
        }, 
        "nodePublishSecretRef": {
          "additionalProperties": false, 
          "type": "object", 
          "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.", 
          "properties": {
            "name": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
            }
          }
        }, 
        "volumeAttributes": {
          "additionalProperties": {
            "type": [
              "string", 
              "null"
            ]
          }, 
          "type": "object", 
          "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values."
        }, 
        "fsType": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply."
        }
      }
    }, 
    "name": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
    }, 
    "secret": {
      "additionalProperties": false, 
      "type": "object", 
      "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "items": {
          "items": {
            "additionalProperties": false, 
            "required": [
              "key", 
              "path"
            ], 
            "type": "object", 
            "description": "Maps a string key to a path within a volume.", 
            "properties": {
              "path": {
                "type": "string", 
                "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
              }, 
              "mode": {
                "type": "integer", 
                "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                "format": "int32"
              }, 
              "key": {
                "type": "string", 
                "description": "The key to project."
              }
            }
          }, 
          "type": [
            "array", 
            "null"
          ], 
          "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
        }, 
        "optional": {
          "type": "boolean", 
          "description": "Specify whether the Secret or its keys must be defined"
        }, 
        "defaultMode": {
          "type": "integer", 
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
          "format": "int32"
        }, 
        "secretName": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
        }
      }
    }, 
    "emptyDir": {
      "additionalProperties": false, 
      "type": "object", 
      "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.", 
      "properties": {
        "sizeLimit": {
          "oneOf": [
            {
              "type": [
                "string", 
                "null"
              ]
            }, 
            {
              "type": "integer"
            }
          ]
        }, 
        "medium": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
        }
      }
    }, 
    "persistentVolumeClaim": {
      "additionalProperties": false, 
      "required": [
        "claimName"
      ], 
      "type": "object", 
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).", 
      "properties": {
        "readOnly": {
          "type": "boolean", 
          "description": "Will force the ReadOnly setting in VolumeMounts. Default false."
        }, 
        "claimName": {
          "type": "string", 
          "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        }
      }
    }
  }
}