{
  "description": "VolumeAttachmentSpec is the specification of a VolumeAttachment request.", 
  "required": [
    "attacher", 
    "source", 
    "nodeName"
  ], 
  "additionalProperties": false, 
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "properties": {
    "source": {
      "additionalProperties": false, 
      "type": "object", 
      "description": "VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.", 
      "properties": {
        "inlineVolumeSpec": {
          "additionalProperties": false, 
          "type": "object", 
          "description": "PersistentVolumeSpec is the specification of a persistent volume.", 
          "properties": {
            "storageClassName": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass."
            }, 
            "csi": {
              "additionalProperties": false, 
              "required": [
                "driver", 
                "volumeHandle"
              ], 
              "type": "object", 
              "description": "Represents storage that is managed by an external CSI volume driver (Beta feature)", 
              "properties": {
                "controllerExpandSecretRef": {
                  "additionalProperties": false, 
                  "type": "object", 
                  "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace", 
                  "properties": {
                    "namespace": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "description": "Namespace defines the space within which the secret name must be unique."
                    }, 
                    "name": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "description": "Name is unique within a namespace to reference a secret resource."
                    }
                  }
                }, 
                "nodeStageSecretRef": {
                  "additionalProperties": false, 
                  "type": "object", 
                  "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace", 
                  "properties": {
                    "namespace": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "description": "Namespace defines the space within which the secret name must be unique."
                    }, 
                    "name": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "description": "Name is unique within a namespace to reference a secret resource."
                    }
                  }
                }, 
                "driver": {
                  "type": "string", 
                  "description": "Driver is the name of the driver to use for this volume. Required."
                }, 
                "volumeAttributes": {
                  "additionalProperties": {
                    "type": [
                      "string", 
                      "null"
                    ]
                  }, 
                  "type": "object", 
                  "description": "Attributes of the volume to publish."
                }, 
                "controllerPublishSecretRef": {
                  "additionalProperties": false, 
                  "type": "object", 
                  "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace", 
                  "properties": {
                    "namespace": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "description": "Namespace defines the space within which the secret name must be unique."
                    }, 
                    "name": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "description": "Name is unique within a namespace to reference a secret resource."
                    }
                  }
                }, 
                "fsType": {
                  "type": [
                    "string", 
                    "null"
                  ], 
                  "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\"."
                }, 
                "readOnly": {
                  "type": "boolean", 
                  "description": "Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write)."
                }, 
                "volumeHandle": {
                  "type": "string", 
                  "description": "VolumeHandle is the unique volume name returned by the CSI volume plugin\u2019s CreateVolume to refer to the volume on all subsequent calls. Required."
                }, 
                "nodePublishSecretRef": {
                  "additionalProperties": false, 
                  "type": "object", 
                  "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace", 
                  "properties": {
                    "namespace": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "description": "Namespace defines the space within which the secret name must be unique."
                    }, 
                    "name": {
                      "type": [
                        "string", 
                        "null"
                      ], 
                      "description": "Name is unique within a namespace to reference a secret resource."
                    }
                  }
                }
              }
            }, 
            "persistentVolumeReclaimPolicy": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming"
            }, 
            "local": {
              "additionalProperties": false, 
              "required": [
                "path"
              ], 
              "type": "object", 
              "description": "Local represents directly-attached storage with node affinity (Beta feature)", 
              "properties": {
                "path": {
                  "type": "string", 
                  "description": "The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...)."
                }, 
                "fsType": {
                  "type": [
                    "string", 
                    "null"
                  ], 
                  "description": "Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a fileystem if unspecified."
                }
              }
            }, 
            "accessModes": {
              "items": {
                "type": [
                  "string", 
                  "null"
                ]
              }, 
              "type": [
                "array", 
                "null"
              ], 
              "description": "AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes"
            }, 
            "claimRef": {
              "additionalProperties": false, 
              "type": "object", 
              "description": "ObjectReference contains enough information to let you inspect or modify the referred object.", 
              "properties": {
                "kind": {
                  "type": [
                    "string", 
                    "null"
                  ], 
                  "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
                }, 
                "name": {
                  "type": [
                    "string", 
                    "null"
                  ], 
                  "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                }, 
                "namespace": {
                  "type": [
                    "string", 
                    "null"
                  ], 
                  "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
                }, 
                "apiVersion": {
                  "type": [
                    "string", 
                    "null"
                  ], 
                  "description": "API version of the referent."
                }, 
                "fieldPath": {
                  "type": [
                    "string", 
                    "null"
                  ], 
                  "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object."
                }, 
                "resourceVersion": {
                  "type": [
                    "string", 
                    "null"
                  ], 
                  "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
                }, 
                "uid": {
                  "type": [
                    "string", 
                    "null"
                  ], 
                  "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids"
                }
              }
            }, 
            "volumeMode": {
              "type": [
                "string", 
                "null"
              ], 
              "description": "volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec. This is a beta feature."
            }, 
            "mountOptions": {
              "items": {
                "type": [
                  "string", 
                  "null"
                ]
              }, 
              "type": [
                "array", 
                "null"
              ], 
              "description": "A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options"
            }, 
            "capacity": {
              "additionalProperties": {
                "oneOf": [
                  {
                    "type": [
                      "string", 
                      "null"
                    ]
                  }, 
                  {
                    "type": "integer"
                  }
                ]
              }, 
              "type": "object", 
              "description": "A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity"
            }, 
            "nodeAffinity": {
              "additionalProperties": false, 
              "type": "object", 
              "description": "VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.", 
              "properties": {
                "required": {
                  "additionalProperties": false, 
                  "required": [
                    "nodeSelectorTerms"
                  ], 
                  "type": "object", 
                  "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.", 
                  "properties": {
                    "nodeSelectorTerms": {
                      "items": {
                        "additionalProperties": false, 
                        "type": "object", 
                        "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.", 
                        "properties": {
                          "matchFields": {
                            "items": {
                              "additionalProperties": false, 
                              "required": [
                                "key", 
                                "operator"
                              ], 
                              "type": "object", 
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                              "properties": {
                                "operator": {
                                  "type": "string", 
                                  "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                }, 
                                "values": {
                                  "items": {
                                    "type": [
                                      "string", 
                                      "null"
                                    ]
                                  }, 
                                  "type": [
                                    "array", 
                                    "null"
                                  ], 
                                  "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                }, 
                                "key": {
                                  "type": "string", 
                                  "description": "The label key that the selector applies to."
                                }
                              }
                            }, 
                            "type": [
                              "array", 
                              "null"
                            ], 
                            "description": "A list of node selector requirements by node's fields."
                          }, 
                          "matchExpressions": {
                            "items": {
                              "additionalProperties": false, 
                              "required": [
                                "key", 
                                "operator"
                              ], 
                              "type": "object", 
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
                              "properties": {
                                "operator": {
                                  "type": "string", 
                                  "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
                                }, 
                                "values": {
                                  "items": {
                                    "type": [
                                      "string", 
                                      "null"
                                    ]
                                  }, 
                                  "type": [
                                    "array", 
                                    "null"
                                  ], 
                                  "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
                                }, 
                                "key": {
                                  "type": "string", 
                                  "description": "The label key that the selector applies to."
                                }
                              }
                            }, 
                            "type": [
                              "array", 
                              "null"
                            ], 
                            "description": "A list of node selector requirements by node's labels."
                          }
                        }
                      }, 
                      "type": "array", 
                      "description": "Required. A list of node selector terms. The terms are ORed."
                    }
                  }
                }
              }
            }
          }
        }, 
        "persistentVolumeName": {
          "type": [
            "string", 
            "null"
          ], 
          "description": "Name of the persistent volume to attach."
        }
      }
    }, 
    "attacher": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName()."
    }, 
    "nodeName": {
      "type": [
        "string", 
        "null"
      ], 
      "description": "The node that the volume should be attached to."
    }
  }
}