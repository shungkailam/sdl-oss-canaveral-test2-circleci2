{
  "additionalProperties": false, 
  "$schema": "http://json-schema.org/schema#", 
  "type": "object", 
  "description": "PodPresetSpec is a description of a pod preset.", 
  "properties": {
    "selector": {
      "additionalProperties": false, 
      "type": "object", 
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.", 
      "properties": {
        "matchLabels": {
          "additionalProperties": {
            "type": [
              "string", 
              "null"
            ]
          }, 
          "type": "object", 
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
        }, 
        "matchExpressions": {
          "items": {
            "additionalProperties": false, 
            "required": [
              "key", 
              "operator"
            ], 
            "type": "object", 
            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.", 
            "properties": {
              "operator": {
                "type": "string", 
                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
              }, 
              "values": {
                "items": {
                  "type": [
                    "string", 
                    "null"
                  ]
                }, 
                "type": [
                  "array", 
                  "null"
                ], 
                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
              }, 
              "key": {
                "x-kubernetes-patch-merge-key": "key", 
                "type": "string", 
                "description": "key is the label key that the selector applies to.", 
                "x-kubernetes-patch-strategy": "merge"
              }
            }
          }, 
          "type": [
            "array", 
            "null"
          ], 
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
        }
      }
    }, 
    "volumeMounts": {
      "items": {
        "additionalProperties": false, 
        "required": [
          "name", 
          "mountPath"
        ], 
        "type": "object", 
        "description": "VolumeMount describes a mounting of a Volume within a container.", 
        "properties": {
          "mountPath": {
            "type": "string", 
            "description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
          }, 
          "name": {
            "type": "string", 
            "description": "This must match the Name of a Volume."
          }, 
          "subPath": {
            "type": [
              "string", 
              "null"
            ], 
            "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
          }, 
          "readOnly": {
            "type": "boolean", 
            "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
          }, 
          "mountPropagation": {
            "type": [
              "string", 
              "null"
            ], 
            "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10."
          }, 
          "subPathExpr": {
            "type": [
              "string", 
              "null"
            ], 
            "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive. This field is beta in 1.15."
          }
        }
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "VolumeMounts defines the collection of VolumeMount to inject into containers."
    }, 
    "env": {
      "items": {
        "additionalProperties": false, 
        "required": [
          "name"
        ], 
        "type": "object", 
        "description": "EnvVar represents an environment variable present in a Container.", 
        "properties": {
          "valueFrom": {
            "additionalProperties": false, 
            "type": "object", 
            "description": "EnvVarSource represents a source for the value of an EnvVar.", 
            "properties": {
              "secretKeyRef": {
                "additionalProperties": false, 
                "required": [
                  "key"
                ], 
                "type": "object", 
                "description": "SecretKeySelector selects a key of a Secret.", 
                "properties": {
                  "optional": {
                    "type": "boolean", 
                    "description": "Specify whether the Secret or its key must be defined"
                  }, 
                  "name": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }, 
                  "key": {
                    "type": "string", 
                    "description": "The key of the secret to select from.  Must be a valid secret key."
                  }
                }
              }, 
              "fieldRef": {
                "additionalProperties": false, 
                "required": [
                  "fieldPath"
                ], 
                "type": "object", 
                "description": "ObjectFieldSelector selects an APIVersioned field of an object.", 
                "properties": {
                  "fieldPath": {
                    "type": "string", 
                    "description": "Path of the field to select in the specified API version."
                  }, 
                  "apiVersion": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
                  }
                }
              }, 
              "configMapKeyRef": {
                "additionalProperties": false, 
                "required": [
                  "key"
                ], 
                "type": "object", 
                "description": "Selects a key from a ConfigMap.", 
                "properties": {
                  "optional": {
                    "type": "boolean", 
                    "description": "Specify whether the ConfigMap or its key must be defined"
                  }, 
                  "name": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }, 
                  "key": {
                    "type": "string", 
                    "description": "The key to select."
                  }
                }
              }, 
              "resourceFieldRef": {
                "additionalProperties": false, 
                "required": [
                  "resource"
                ], 
                "type": "object", 
                "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format", 
                "properties": {
                  "containerName": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "Container name: required for volumes, optional for env vars"
                  }, 
                  "resource": {
                    "type": "string", 
                    "description": "Required: resource to select"
                  }, 
                  "divisor": {
                    "oneOf": [
                      {
                        "type": [
                          "string", 
                          "null"
                        ]
                      }, 
                      {
                        "type": "integer"
                      }
                    ]
                  }
                }
              }
            }
          }, 
          "name": {
            "type": "string", 
            "description": "Name of the environment variable. Must be a C_IDENTIFIER."
          }, 
          "value": {
            "type": [
              "string", 
              "null"
            ], 
            "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
          }
        }
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "Env defines the collection of EnvVar to inject into containers."
    }, 
    "volumes": {
      "items": {
        "additionalProperties": false, 
        "required": [
          "name"
        ], 
        "type": "object", 
        "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.", 
        "properties": {
          "configMap": {
            "additionalProperties": false, 
            "type": "object", 
            "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.", 
            "properties": {
              "items": {
                "items": {
                  "additionalProperties": false, 
                  "required": [
                    "key", 
                    "path"
                  ], 
                  "type": "object", 
                  "description": "Maps a string key to a path within a volume.", 
                  "properties": {
                    "path": {
                      "type": "string", 
                      "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                    }, 
                    "mode": {
                      "type": "integer", 
                      "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                      "format": "int32"
                    }, 
                    "key": {
                      "type": "string", 
                      "description": "The key to project."
                    }
                  }
                }, 
                "type": [
                  "array", 
                  "null"
                ], 
                "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
              }, 
              "optional": {
                "type": "boolean", 
                "description": "Specify whether the ConfigMap or its keys must be defined"
              }, 
              "defaultMode": {
                "type": "integer", 
                "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                "format": "int32"
              }, 
              "name": {
                "type": [
                  "string", 
                  "null"
                ], 
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
              }
            }
          }, 
          "csi": {
            "additionalProperties": false, 
            "required": [
              "driver"
            ], 
            "type": "object", 
            "description": "Represents a source location of a volume to mount, managed by an external CSI driver", 
            "properties": {
              "driver": {
                "type": "string", 
                "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster."
              }, 
              "readOnly": {
                "type": "boolean", 
                "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write)."
              }, 
              "nodePublishSecretRef": {
                "additionalProperties": false, 
                "type": "object", 
                "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.", 
                "properties": {
                  "name": {
                    "type": [
                      "string", 
                      "null"
                    ], 
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
                  }
                }
              }, 
              "volumeAttributes": {
                "additionalProperties": {
                  "type": [
                    "string", 
                    "null"
                  ]
                }, 
                "type": "object", 
                "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values."
              }, 
              "fsType": {
                "type": [
                  "string", 
                  "null"
                ], 
                "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply."
              }
            }
          }, 
          "name": {
            "type": "string", 
            "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
          }, 
          "secret": {
            "additionalProperties": false, 
            "type": "object", 
            "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.", 
            "properties": {
              "items": {
                "items": {
                  "additionalProperties": false, 
                  "required": [
                    "key", 
                    "path"
                  ], 
                  "type": "object", 
                  "description": "Maps a string key to a path within a volume.", 
                  "properties": {
                    "path": {
                      "type": "string", 
                      "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
                    }, 
                    "mode": {
                      "type": "integer", 
                      "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                      "format": "int32"
                    }, 
                    "key": {
                      "type": "string", 
                      "description": "The key to project."
                    }
                  }
                }, 
                "type": [
                  "array", 
                  "null"
                ], 
                "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'."
              }, 
              "optional": {
                "type": "boolean", 
                "description": "Specify whether the Secret or its keys must be defined"
              }, 
              "defaultMode": {
                "type": "integer", 
                "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.", 
                "format": "int32"
              }, 
              "secretName": {
                "type": [
                  "string", 
                  "null"
                ], 
                "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
              }
            }
          }, 
          "emptyDir": {
            "additionalProperties": false, 
            "type": "object", 
            "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.", 
            "properties": {
              "sizeLimit": {
                "oneOf": [
                  {
                    "type": [
                      "string", 
                      "null"
                    ]
                  }, 
                  {
                    "type": "integer"
                  }
                ]
              }, 
              "medium": {
                "type": [
                  "string", 
                  "null"
                ], 
                "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
              }
            }
          }, 
          "persistentVolumeClaim": {
            "additionalProperties": false, 
            "required": [
              "claimName"
            ], 
            "type": "object", 
            "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).", 
            "properties": {
              "readOnly": {
                "type": "boolean", 
                "description": "Will force the ReadOnly setting in VolumeMounts. Default false."
              }, 
              "claimName": {
                "type": "string", 
                "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
              }
            }
          }
        }
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "Volumes defines the collection of Volume to inject into the pod."
    }, 
    "envFrom": {
      "items": {
        "additionalProperties": false, 
        "type": "object", 
        "description": "EnvFromSource represents the source of a set of ConfigMaps", 
        "properties": {
          "prefix": {
            "type": [
              "string", 
              "null"
            ], 
            "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER."
          }, 
          "configMapRef": {
            "additionalProperties": false, 
            "type": "object", 
            "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.", 
            "properties": {
              "optional": {
                "type": "boolean", 
                "description": "Specify whether the ConfigMap must be defined"
              }, 
              "name": {
                "type": [
                  "string", 
                  "null"
                ], 
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
              }
            }
          }, 
          "secretRef": {
            "additionalProperties": false, 
            "type": "object", 
            "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.", 
            "properties": {
              "optional": {
                "type": "boolean", 
                "description": "Specify whether the Secret must be defined"
              }, 
              "name": {
                "type": [
                  "string", 
                  "null"
                ], 
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
              }
            }
          }
        }
      }, 
      "type": [
        "array", 
        "null"
      ], 
      "description": "EnvFrom defines the collection of EnvFromSource to inject into containers."
    }
  }
}