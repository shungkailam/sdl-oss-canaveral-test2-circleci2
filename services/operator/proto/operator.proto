syntax = "proto3";
import "google/protobuf/timestamp.proto";

package api;

service ReleaseService {
    rpc GetRelease(GetReleaseRequest) returns (Release) {
    }

    rpc ListCompatibleReleases(ListCompatibleReleasesRequest) returns (ListReleasesResponse) {
    }

    rpc ListReleases(ListReleasesRequest) returns (ListReleasesResponse) {
    }

    /* Start download on a batch of service domains */
    rpc StartDownload(StartDownloadRequest) returns (StartDownloadResponse) {
    }

    /* Update an existing active download batch e.g cancel, retry */
    rpc UpdateDownload(UpdateDownloadRequest) returns (UpdateDownloadResponse) {
    }

    /* Update the state including progress and eta of an active download */
    rpc UpdateDownloadState(UpdateDownloadStateRequest) returns (UpdateDownloadStateResponse) {
    }

    /* CreateDownloadCredentials creates the credentials needed to download software release files */
    rpc CreateDownloadCredentials(CreateDownloadCredentialsRequest) returns (CreateDownloadCredentialsResponse) {
    }

    /* List all the download batches */
    rpc ListDownloadBatches(ListDownloadBatchesRequest) returns (ListDownloadBatchesResponse) {
    }

    /* List all the service domains with download states in a download batch */
    rpc ListDownloadBatchServiceDomains(ListDownloadBatchServiceDomainsRequest) returns (ListDownloadBatchServiceDomainsResponse) {
    }

    /* List all services domains which have downloaded the release in the request */
    rpc ListDownloadedServiceDomains(ListDownloadedServiceDomainsRequest) returns (ListDownloadedServiceDomainsResponse) {
    }

    /* List all services domains with the most recent batches */
    rpc ListServiceDomains(ListServiceDomainsRequest) returns (ListServiceDomainsResponse) {
    }

    /* Start upgrade on a batch of service domains */
    rpc StartUpgrade(StartUpgradeRequest) returns (StartUpgradeResponse) {
    }

    /* Update an existing active upgrade batch e.g retry */
    rpc UpdateUpgrade(UpdateUpgradeRequest) returns (UpdateUpgradeResponse) {
    }

    /* Update the state including progress and eta of an active upgrade */
    rpc UpdateUpgradeState(UpdateUpgradeStateRequest) returns (UpdateUpgradeStateResponse) {
    }

    /* List all the upgrade batches */
    rpc ListUpgradeBatches(ListUpgradeBatchesRequest) returns (ListUpgradeBatchesResponse) {
    }

    /* List all the service domains with upgrade states in a upgrade batch */
    rpc ListUpgradeBatchServiceDomains(ListUpgradeBatchServiceDomainsRequest) returns (ListUpgradeBatchServiceDomainsResponse) {
    }

    /* Gets the currently active service domain */
    rpc GetCurrentServiceDomain(GetCurrentServiceDomainRequest) returns (GetCurrentServiceDomainResponse) {
    }

    /* Deletes a given batch */
    rpc DeleteBatch(DeleteBatchRequest) returns (DeleteBatchResponse) {
    }

    /* Gets the release helm chart */
    rpc GetReleaseHelmChart(GetReleaseHelmChartRequest) returns (GetReleaseHelmChartResponse) {
    }

}

/* Query parameter */
message QueryParameter {
    int32 pageIndex = 1;
    int32 pageSize = 2;
    string filter = 3;
    repeated string orderBy = 4;
}

/* Page Info */
message PageInfo {
    int32 pageIndex = 1;
    int32 pageSize = 2;
    int32 totalCount = 3;
    repeated string orderByKeys = 4;
}

message Release {
    google.protobuf.Timestamp  timestamp = 1;
	string id = 2;
    string changelog = 3;
    bytes data = 4;
    string url = 5;
}

message ListReleasesResponse {
    repeated Release releases = 1;
}

message GetReleaseRequest {
	string id = 1;
}

message ListCompatibleReleasesRequest {
	string id = 1;	
}

message ListReleasesRequest {
}

message StartDownloadRequest {
    repeated string svcDomainIds = 1;
    string release = 2;
}

message StartDownloadResponse {
    string batchId = 1;
    string state = 2;
}

message UpdateDownloadRequest {
    string batchId = 1;
    string command = 2;
}

message UpdateDownloadResponse {
    string batchId = 1;
    string state = 2;
    string release = 3;
    repeated ServiceDomainState svcDomainStates = 4;
}

message ServiceDomainState {
    string svcDomainId = 1;
    string state = 2;
}

message UpdateDownloadStateRequest {
    string batchId = 1;
    string svcDomainId = 2;
    string state = 3;
    string release = 4;
    string failureReason = 5;
    int32 progress = 6;
    int32 eta = 7;
}

message UpdateDownloadStateResponse {
   string batchId = 1;
   string svcDomainId = 2;
   string state = 3;
   string release = 4;
}

message CreateDownloadCredentialsRequest {
    string batchId = 1;
    string release = 2;
    string accessType = 3;
}

message CreateDownloadCredentialsResponse {
    string batchId = 1;
    string release = 2;
    string accessType = 3;
    map<string, string> credentials = 4;
}

message ListDownloadBatchesRequest {
    QueryParameter queryParameter = 1;
    string batchId = 2;
}

message ListDownloadBatchesResponse {
    PageInfo pageInfo = 1;
    repeated SoftwareUpdateBatch batches = 2;
}

message SoftwareUpdateBatch {
    string id = 1;
    string state = 2;
    string release = 3;
    string type = 4;
    int32 progress = 5;
    int32 eta = 6;
	map<string, int32> stats = 7;
    google.protobuf.Timestamp createdAt = 8;
    google.protobuf.Timestamp updatedAt = 9;
}

message SoftwareUpdateServiceDomain {
    string batchId = 1;
    string svcDomainId = 2;
    string state = 3;
    string release = 4;
    string failureReason = 5;
    int32 progress = 6;
    int32 eta = 7;
    google.protobuf.Timestamp createdAt = 8;
    google.protobuf.Timestamp updatedAt = 9;
    google.protobuf.Timestamp stateUpdatedAt = 10;
    bool isLatestBatch = 11;
}

message ListDownloadBatchServiceDomainsRequest {
    QueryParameter queryParameter = 1;
    string batchId = 2;
    string svcDomainId = 3;
}

message ListDownloadBatchServiceDomainsResponse {
    PageInfo pageInfo = 1;
    repeated SoftwareUpdateServiceDomain svcDomains = 2;
}

message ListDownloadedServiceDomainsRequest {
    QueryParameter queryParameter = 1;
    string release = 2;
    string svcDomainId = 3;
}

message ListDownloadedServiceDomainsResponse {
    PageInfo pageInfo = 1;
    repeated string svcDomainIds = 2;
}

message ListServiceDomainsRequest {
    QueryParameter queryParameter = 1;
    string type = 2;
    string svcDomainId = 3;
    bool isLatestBatch = 4;
}

message ListServiceDomainsResponse {
    PageInfo pageInfo = 1;
    repeated SoftwareUpdateServiceDomain svcDomains = 2;
}

message StartUpgradeRequest {
    repeated string svcDomainIds = 1;
    string release = 2;
}

message StartUpgradeResponse {
    string batchId = 1;
    string state = 2;
}

message UpdateUpgradeRequest {
    string batchId = 1;
    string command = 2;
}

message UpdateUpgradeResponse {
    string batchId = 1;
    string state = 2;
    string release = 3;
    repeated ServiceDomainState svcDomainStates = 4;
}

message UpdateUpgradeStateRequest {
    string batchId = 1;
    string svcDomainId = 2;
    string state = 3;
    string release = 4;
    string failureReason = 5;
    int32 progress = 6;
    int32 eta = 7;
}

message UpdateUpgradeStateResponse {
    string batchId = 1;
    string svcDomainId = 2;
    string state = 3;
}

message ListUpgradeBatchesRequest {
    QueryParameter queryParameter = 1;
    string batchId = 2;
}

message ListUpgradeBatchesResponse {
    PageInfo pageInfo = 1;
    repeated SoftwareUpdateBatch batches = 2;
}

message ListUpgradeBatchServiceDomainsRequest {
    QueryParameter queryParameter = 1;
    string batchId = 2;
    string svcDomainId = 3;
}

message ListUpgradeBatchServiceDomainsResponse {
    PageInfo pageInfo = 1;
    repeated SoftwareUpdateServiceDomain svcDomains = 2;
}

message GetCurrentServiceDomainRequest {
    // Is this batch ID current?
    string batchId = 1;
    // Look back only upto this updated timestamp
    google.protobuf.Timestamp stateUpdatedAt = 2;
}

message GetCurrentServiceDomainResponse {
    SoftwareUpdateServiceDomain svcDomain = 1;
}

message DeleteBatchRequest {
    string batchId = 1;
}

message DeleteBatchResponse {
}


message ReleaseHelmChart {
    string id = 1;
    string url = 2;
}

message GetReleaseHelmChartRequest {
}

message GetReleaseHelmChartResponse {
    ReleaseHelmChart release = 1;
}