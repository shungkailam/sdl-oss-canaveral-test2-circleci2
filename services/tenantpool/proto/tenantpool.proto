syntax = "proto3";
import "google/protobuf/timestamp.proto";

package tenantpoolapi;

service TenantPoolService {
    /* Registration APIs */
    rpc CreateRegistration(CreateRegistrationRequest) returns (CreateRegistrationResponse) {
    }

    rpc GetRegistrations(GetRegistrationsRequest) returns (GetRegistrationsResponse) {
    }

    rpc UpdateRegistration(UpdateRegistrationRequest) returns (UpdateRegistrationResponse) {
    }

    rpc DeleteRegistration(DeleteRegistrationRequest) returns (DeleteRegistrationResponse) {

    }

    /* Tenant APIs */
    rpc CreateTenantClaim(CreateTenantClaimRequest) returns (CreateTenantClaimResponse) {

    }

    rpc UpdateTenantClaim(UpdateTenantClaimRequest) returns (UpdateTenantClaimResponse) {
    }

    rpc GetTenantClaims(GetTenantClaimsRequest) returns (GetTenantClaimsResponse) {
    }

    rpc ReserveTenantClaim(ReserveTenantClaimRequest) returns (ReserveTenantClaimResponse) {
    }

    rpc ConfirmTenantClaim(ConfirmTenantClaimRequest) returns (ConfirmTenantClaimResponse) {
    }

    rpc DeleteTenantClaim(DeleteTenantClaimRequest) returns (DeleteTenantClaimResponse) {
    }

    rpc RecreateTenantClaims(RecreateTenantClaimsRequest) returns (RecreateTenantClaimsResponse) {
    }

    rpc AssignTenantClaim(AssignTenantClaimRequest) returns (AssignTenantClaimResponse) {
    }
}

/* Query parameter */
message QueryParamater {
    int32 pageIndex = 1;
    int32 pageSize = 2;
    string filter = 3;
    repeated string orderBy = 4;
}

/* Page Info */
message PageInfo {
    int32 pageIndex = 1;
    int32 pageSize = 2;
    int32 totalCount = 3;
    repeated string orderByKeys = 4;
}

/* Metadata (optional) used for audit logging */
message Metadata {
    string tenantId = 1;
    string registrationId = 2;
    string email = 3;
    string actor = 4;
}

/* Registration API parameters */
message Registration {
    string id = 1;
    string description = 2;
    string config = 3;
    string state = 4;
    google.protobuf.Timestamp createdAt = 5;
    google.protobuf.Timestamp updatedAt = 6;
}

message CreateRegistrationRequest {
    Registration registration = 1;
    Metadata metadata = 2;
}

message CreateRegistrationResponse {
    string id = 1;
}

message GetRegistrationsRequest {
    string id = 1;
    string state = 2;
    Metadata metadata = 3;
    QueryParamater queryParameter = 4;
}

message GetRegistrationsResponse {
    repeated Registration registrations = 1;
    PageInfo pageInfo = 2;
}

message UpdateRegistrationRequest {
    Registration registration = 1;
    Metadata metadata = 2;
}

message UpdateRegistrationResponse {
    string id = 1;
}

message DeleteRegistrationRequest {
    string id = 1;
    Metadata metadata = 2;
}

message DeleteRegistrationResponse {
    string id = 2;
}

/* Tenant API parameters */
message EdgeContext {
    string id = 1;
    string edgeId = 2;
    string state = 3;
    string type = 4;
    google.protobuf.Timestamp createdAt = 6;
    google.protobuf.Timestamp updatedAt = 7;
    string details = 8;
}

message Resource {
    string type = 1;
    string name = 2;
    string id = 3;
    repeated string edgeIds = 4;
}

message TenantClaim {
    string id = 1;
    string registrationId = 2;
    string state = 3;
    string systemUser = 4;
    string systemPassword = 5;
    bool trial = 6;
    map<string, Resource> resources = 7;
    repeated EdgeContext edgeContexts = 8;
    google.protobuf.Timestamp createdAt = 9;
    google.protobuf.Timestamp updatedAt = 10;
    // Do not forget to check zero value on the golang client
    google.protobuf.Timestamp assignedAt = 11;
    google.protobuf.Timestamp expiresAt = 12;
}

message CreateTenantClaimRequest {
    string registrationId = 1;
    string tenantId = 2;
    Metadata metadata = 3;
}

message CreateTenantClaimResponse {
    TenantClaim tenantClaim = 1;
}

message UpdateTenantClaimRequest {
    TenantClaim tenantClaim = 1;
    Metadata metadata = 2;
}

message UpdateTenantClaimResponse {
    string tenantId = 1;
}

message GetTenantClaimsRequest {
    string registrationId = 1;
    string tenantId = 2;
    string state = 3;
    string email = 4;
    bool verbose = 5;
    QueryParamater queryParameter = 6;
}

message GetTenantClaimsResponse {
    repeated TenantClaim tenantClaims = 1;
    PageInfo pageInfo = 2;
}

message ReserveTenantClaimRequest {
    string registrationId = 1;
    Metadata metadata = 2;
}

message ReserveTenantClaimResponse {
    string tenantId = 1;
}

message ConfirmTenantClaimRequest {
    string registrationId = 1;
    string tenantId = 2;
    Metadata metadata = 3;
}

message ConfirmTenantClaimResponse {
    TenantClaim tenantClaim = 1;
}

message DeleteTenantClaimRequest {
    string tenantId = 1;
    Metadata metadata = 2;
}

message DeleteTenantClaimResponse {
    string tenantId = 1;
}

message RecreateTenantClaimsRequest {
    string registrationId = 1;
    Metadata metadata = 2;
    string filter = 3;
}

message RecreateTenantClaimsResponse {
    string registrationId = 1;
}

message AssignTenantClaimRequest {
    string registrationId = 1;
    string tenantId = 2;
    string email = 3;
    Metadata metadata = 4;
}

message AssignTenantClaimResponse {
    string tenantId = 1;
}
