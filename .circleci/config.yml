version: 2.0
jobs:
  build:
    docker:
    - image: cimg/python:3.8.5
    - image: circleci/mongo:3.0.15  # Remove if not used
    resource_class: small
    environment:
      CIRCLE_ARTIFACTS: /home/circleci/artifacts
      CIRCLE_TEST_REPORTS: /home/circleci/test_reports
      NPM_EMAIL: ui@nutanix.com
      NPM_SERVICE_DIR: services
      NPM_REGISTRY: http://drt-ep-artifactory-dev-1.eng.nutanix.com:8081/artifactory/api/npm/canaveral-npm-virtual/
      JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
      CANAVERAL_BUILD_SYSTEM: golang
      CANAVERAL_LANGUAGE_VERSION: 1.13
      CANAVERAL_PACKAGE_TOOLS: npm
      ENABLE_SECURITY_SCAN: 1
      BLACKDUCK_TARGET_SOURCE_PATH: 1
     # BLACKDUCK_TARGET_DOCKER_IMAGE: 1
    steps:
    - checkout
    - run:
        name: Bootstrap Canaveral Certs
        command: |-
          declare -x CANAVERAL_CERT_DOWNLOAD_URL="${CANAVERAL_CERT_DOWNLOAD_URL:-http://canaveral-engine-api.canaveral-corp.us-west-2.aws/ca}"
          sudo wget -t 5 -v "${CANAVERAL_CERT_DOWNLOAD_URL}/root-ca.crt" -O "/usr/local/share/ca-certificates/canaveral-root-ca.crt"
          sudo wget -t 5 -v "${CANAVERAL_CERT_DOWNLOAD_URL}/intermediate-ca.crt" -O "/usr/local/share/ca-certificates/canaveral-intermediate-ca.crt"
          sudo /usr/sbin/update-ca-certificates
          sudo wget -t 5 -v "${CANAVERAL_CERT_DOWNLOAD_URL}/ca-chain.crt" -O "/tmp/ca-chain.crt"
          cat "/tmp/ca-chain.crt" >> $(python -m certifi)
    - run:
        name: Install canaveral-build-tools
        command: |-
          BUILD_TOOLS_VERSION=$(curl -s -L https://canaveral-gatekeeper.canaveral-corp.us-west-2.aws/build_config/build_tools_version | jq -r '.result')
          echo "Using build tools version '${BUILD_TOOLS_VERSION}'"
          pyenv virtualenv canaveral_build
          PYENV_VERSION=canaveral_build pip install --upgrade pip
          PYENV_VERSION=canaveral_build pip install --extra-index-url https://canaveral-artifacts.corp.nutanix.com:8091/ --trusted-host canaveral-artifacts.corp.nutanix.com nutanix-release-engineering-canaveral-build-tools=="${BUILD_TOOLS_VERSION}"
    - run:
        name: Install canaveral backward compatibility layer
        command: |-
          python -m canaveral_build_tools.core.backward_compatibility
          mkdir -p ${CIRCLE_ARTIFACTS}
          mkdir -p ${CIRCLE_TEST_REPORTS}
        environment:
          PYENV_VERSION: canaveral_build
    - run:
        name: Finalize Canaveral Cert Install
        command: |-
          mkdir -p "/tmp/ssl-certs/tmp"
          sudo -E $(pyenv which python) -m canaveral_build_tools.core.setup_ca_chain
          sudo chown -R circleci:circleci /tmp/canaveral_logs
        environment:
          PYENV_VERSION: canaveral_build
    - run:
        name: canaveral/core/scripts/create-workspace.sh
        command: |-
          CANAVERAL_TOKEN_VENDING_MACHINE_NONCE=$(head /dev/urandom | env LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
          echo "export CANAVERAL_TOKEN_VENDING_MACHINE_NONCE=${CANAVERAL_TOKEN_VENDING_MACHINE_NONCE}" >> $BASH_ENV
          echo "NONCE: ${CANAVERAL_TOKEN_VENDING_MACHINE_NONCE}"
        environment:
          PYENV_VERSION: canaveral_build
    - run:
        name: Install java
        command: |-
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends openjdk-8-jdk
    - run:
        name: Install node
        command: |-
          CODENAME=$(lsb_release -cs)
          wget https://deb.nodesource.com/node_12.x/pool/main/n/nodejs/nodejs_12.18.4-1nodesource1~${CODENAME}_amd64.deb -O node.deb|| wget https://deb.nodesource.com/node_12.x/pool/main/n/nodejs/nodejs_12.18.4-1nodesource1_amd64.deb -O node.deb
          sudo dpkg -i node.deb
          rm node.deb
    - run:
        name: Setup Environment
        command: python -m canaveral_build_tools.core.setup_environment
        environment:
          PYENV_VERSION: canaveral_build
    - run:
        name: Post Checkout
        command: python -m canaveral_build_tools.core.post_checkout
        environment:
          PYENV_VERSION: canaveral_build
    - run:
        name: Dependency Setup
        command: python -m canaveral_build_tools.core.dependency_setup
        environment:
          PYENV_VERSION: canaveral_build
    - run:  # Remove if not used
        name: Setup Build System Deprecated Hooks Only
        command: python -m canaveral_build_tools.core.setup_build_system
        environment:
          PYENV_VERSION: canaveral_build
    - run:  # Remove if not used
        name: Setup Package Tools Deprecated Hooks Only
        command: python -m canaveral_build_tools.core.setup_package_tools
        environment:
          PYENV_VERSION: canaveral_build
    - run:
        name: Database Setup
        command: python -m canaveral_build_tools.core.setup_database
        environment:
          PYENV_VERSION: canaveral_build
    - run:
        name: Push event Build::Started
        command: python -m canaveral_build_tools.core.push_event Build::Started
        environment:
          PYENV_VERSION: canaveral_build
    - run:
        name: Build
        command: python -m canaveral_build_tools.core.build
        environment:
          PYENV_VERSION: canaveral_build
    - run:
        name: '"unit" Tests'
        command: python -m canaveral_build_tools.core.run_tests "unit"
        environment:
          PYENV_VERSION: canaveral_build
    - run:
        name: Package
        command: python -m canaveral_build_tools.core.package
        environment:
          PYENV_VERSION: canaveral_build
    - run:
        name: Security Scan
        command: |
          if [[ $CIRCLE_BRANCH == "oss-demo" ]]; then
            python -m canaveral_build_tools.tools.blackduck_scan
          fi
        environment:
          PYENV_VERSION: canaveral_build
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: test-results
    - store_artifacts:
        path: coverage
    - store_test_results:
        path: /home/circleci/test_reports
    - store_artifacts:
        path: /home/circleci/artifacts
    - run:
        name: Inform Dependencies
        command: python -m canaveral_build_tools.core.inform_dependencies
        environment:
          PYENV_VERSION: canaveral_build
          TAG_FILTER: /(?:(v[0-9]\.[0-9]\.[0-9]))/
    - run:
        name: Push event Build::Finished::Succeeded
        command: python -m canaveral_build_tools.core.push_event Build::Finished::Succeeded
        environment:
          PYENV_VERSION: canaveral_build
          TAG_FILTER: /(?:(v[0-9]\.[0-9]\.[0-9]))/
    - run:
        name: canaveral deploy
        command: python -m canaveral_build_tools.core.deploy
        environment:
          PYENV_VERSION: canaveral_build
          TAG_FILTER: /(?:(v[0-9]\.[0-9]\.[0-9]))/
    - store_artifacts:
        name: Archive build logs
        path: /tmp/canaveral_logs
workflows:
  version: 2
  tag_triggered_builds-0:
    jobs:
    - build:
        filters:
          tags:
            only: /(v[0-9]\.[0-9]\.[0-9])/
